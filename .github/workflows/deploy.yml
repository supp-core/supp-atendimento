# name: CI/CD para AKS com Azure Container Registry

# on:
#   push:
#     branches:
#       - master
#       - desenvolvimento

# env:
#   REGISTRY: suppregistry.azurecr.io
#   BACKEND_IMAGE_NAME: helpdesk/supp-backend-kubernetes
#   WEBSERVER_IMAGE_NAME: helpdesk/supp-webserver-kubernetes
#   IMAGE_TAG: v1.0.${{ github.run_number }}

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     outputs:
#       image_tag: ${{ steps.set_tag.outputs.image_tag }}

#     steps:
#       - name: Checkout do reposit贸rio
#         uses: actions/checkout@v3

#       - name: Definir tag da imagem
#         id: set_tag
#         run: echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

#       - name: Login no Azure Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ secrets.ACR_USERNAME }}
#           password: ${{ secrets.ACR_PASSWORD }}

#       - name: Build e push da imagem Backend
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           file: ./docker/php/Dockerfile
#           push: true
#           tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#       - name: Build e push da imagem Webserver
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           file: ./docker/nginx/Dockerfile
#           push: true
#           tags: ${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     environment: ${{ github.ref == 'refs/heads/master' && 'producao' || 'desenvolvimento' }}

#     steps:
#       - name: Checkout do reposit贸rio
#         uses: actions/checkout@v3

#       - name: Configurar acesso ao Kubernetes
#         run: |
#           mkdir -p ~/.kube
#           echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

#       - name: Substituir IMAGE_TAG nos arquivos YAML
#         run: |
#           find kubernetes/ -type f -name "*.yaml" -exec sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image_tag }}|g" {} +

#       - name: Aplicar deployments no AKS
#         run: |
#           kubectl apply -f kubernetes/backend-deployment.yaml -n helpdesk
#           kubectl apply -f kubernetes/backend-service.yaml -n helpdesk
#           kubectl apply -f kubernetes/webserver-deployment.yaml -n helpdesk
#           kubectl apply -f kubernetes/webserver-service.yaml -n helpdesk
#           kubectl apply -f kubernetes/ingress.yaml -n helpdesk

########## TESTE BUILD COM CACHE #############
name: CI/CD para AKS com Azure Container Registry

on:
  push:
    branches:
      - master
      - desenvolvimento

env:
  REGISTRY: suppregistry.azurecr.io
  BACKEND_IMAGE_NAME: helpdesk/supp-backend-kubernetes
  WEBSERVER_IMAGE_NAME: helpdesk/supp-webserver-kubernetes
  IMAGE_TAG: v1.0.${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      - name: Checkout do reposit贸rio
        uses: actions/checkout@v3

      - name: Definir tag da imagem
        id: set_tag
        run: echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Login no Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build e push da imagem Backend com cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/php/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          cache-to: type=inline

      - name: Tag adicional "latest" Backend
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Build e push da imagem Webserver com cache
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/nginx/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:latest
          cache-to: type=inline

      - name: Tag adicional "latest" Webserver
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.WEBSERVER_IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'producao' || 'desenvolvimento' }}

    steps:
      - name: Checkout do reposit贸rio
        uses: actions/checkout@v3

      - name: Configurar acesso ao Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Substituir IMAGE_TAG nos arquivos YAML
        run: |
          find kubernetes/ -type f -name "*.yaml" -exec sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image_tag }}|g" {} +

      - name: Aplicar deployments no AKS
        run: |
          kubectl apply -f kubernetes/backend-deployment.yaml -n helpdesk
          kubectl apply -f kubernetes/backend-service.yaml -n helpdesk
          kubectl apply -f kubernetes/webserver-deployment.yaml -n helpdesk
          kubectl apply -f kubernetes/webserver-service.yaml -n helpdesk
          kubectl apply -f kubernetes/ingress.yaml -n helpdesk
